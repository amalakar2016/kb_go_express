import time
import json
import os
import uuid
import errno
import subprocess
import zipfile
import shutil
import csv
import numpy
import fileinput
import re

from DataFileUtil.DataFileUtilClient import DataFileUtil
from Workspace.WorkspaceClient import Workspace as Workspace
from KBaseReport.KBaseReportClient import KBaseReport
from GenomeSearchUtil.GenomeSearchUtilClient import GenomeSearchUtil


def log(message, prefix_newline=False):
    """Logging function, provides a hook to suppress or redirect log messages."""
    print(('\n' if prefix_newline else '') + '{0:.2f}'.format(time.time()) + ': ' + str(message))



class GOExpressUtil:


	def _validate_run_goexpress_app_params(self, params):
        """
        _validate_goexpress_app_params:
                validates params passed to run_goexpress_app method
        """

        log('start validating run_goexpress_app params')

        # check for required parameters
        for p in ['expressionset_ref',
                  'condition_label', 'workspace_name',
                  'num_permutations']:
            if p not in params:
				raise ValueError('"{}" parameter is required, but missing'.format(p))


    def _mkdir_p(self, path):
        """
        _mkdir_p: make directory for given path
        """
        if not path:
            return
        try:
            os.makedirs(path)
        except OSError as exc:
            if exc.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else:
				raise





	def _generate_report(self,  params, result_directory):
        """
        _generate_report: generate summary report
        """

        log('creating report')

        output_files = self._generate_output_file_list(result_directory)

        output_html_files = self._generate_html_report(result_directory,
                                                       params)

        diff_expr_set_data = self.ws.get_objects2({'objects':
                                                  [{'ref': 
                                                   diff_expression_obj_ref}]})['data'][0]['data']

        diff_expr_ref = diff_expr_set_data['items'][0]['ref']

        description_set = 'DifferentialExpressionMatrixSet generated by DESeq2'
        description_object = 'DifferentialExpressionMatrix generated by DESeq2'
        report_params = {'message': '',
                         'workspace_name': params.get('workspace_name'),
                         'objects_created': [{'ref': diff_expression_obj_ref,
                                              'description': description_set},
                                             {'ref': diff_expr_ref,
                                              'description': description_object}],
                         'file_links': output_files,
                         'html_links': output_html_files,
                         'direct_html_link_index': 0,
                         'html_window_height': 333,
                         'report_object_name': 'kb_deseq2_report_' + str(uuid.uuid4())}

        kbase_report_client = KBaseReport(self.callback_url)
        output = kbase_report_client.create_extended_report(report_params)

        report_output = {'report_name': output['name'], 'report_ref': output['ref']}

		return report_output


		

	def expression_object_to_tsv(self, params, expression_object, expression_matrix_TSV_path):
		"""
		get expression matrix: 
		get_expression_matrix from expressionset
		"""	

		log ('Starting get_expression_matrix')
		#TODO remove this hardcoding
		#expression_object = '6878/413/15'
        #df = DataFileUtil(os.environ['SDK_CALLBACK_URL'])

        expression_matrix_data = self.df.get_objects({'object_refs':
                                                  [expression_object]})['data'][0]['data']
        #print expression_matrix_data

        expression_matrix_TSV = []
        col_ids = expression_matrix_data['data']['col_ids']
        ids =  "\t". join ([str(x) for x in col_ids])
        
        expression_matrix_TSV.append(" " + "\t" + ids + "\n")

        feature_list = expression_matrix_data['data']['row_ids']
        values = expression_matrix_data['data']['values']

        for feature, value in zip (feature_list, values):
            row_value =  "\t".join(map(str, value)) 
            expression_matrix_TSV.append (feature + "\t" + row_value + "\n")


        textstring_TSV = "".join (expression_matrix_TSV)
        #TODO put some try and catch here
        file = open(expression_matrix_TSV_path,'w')  
        file.write(textstring_TSV)
        file.close()

        return expression_matrix_TSV_path


	def prepare_r_command(self,params, expression_matrix_TSV_path):
		"""
		generate r command from parameters: 
		get_expression_matrix from expressionset
		"""
		command = "Rscript dummyRscript.R outputdir"

		return command

    def _run_command(self, command):
        """
        _run_command: run command and print result
        """
        log('Start executing command:\n{}'.format(command))
        pipe = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
        output = pipe.communicate()[0]
        exitCode = pipe.returncode

        if (exitCode == 0):
            log('Executed commend:\n{}\n'.format(command) +
                'Exit Code: {}\nOutput:\n{}'.format(exitCode, output))
        else:
            error_msg = 'Error running commend:\n{}\n'.format(command)
            error_msg += 'Exit Code: {}\nOutput:\n{}'.format(exitCode, output)
            raise ValueError(error_msg)


	def __init__(self, config):
        self.ws_url = config["workspace-url"]
        self.callback_url = config['SDK_CALLBACK_URL']
        self.token = config['KB_AUTH_TOKEN']
        self.shock_url = config['shock-url']
        self.df = DataFileUtil(self.callback_url)
        self.gsu = GenomeSearchUtil(self.callback_url)
        self.ws = Workspace(self.ws_url, token=self.token)
		self.scratch = config['scratch']


	def run_goexpress_app(self, params):
		"""
        run_goexpress_app: run GOExpress app
        (https://bioconductor.org/packages/release/bioc/html/GOexpress.html)
        required params:
            expression_ref: ExpressionSet object reference
            condition_labels: conditions for expression set object
            genome
            ontology info
           
        return:
            result_directory: folder path that holds all files generated by run_goexpress_app
            report_name: report name generated by KBaseReport
            report_ref: report reference generated by KBaseReport
        """

        




