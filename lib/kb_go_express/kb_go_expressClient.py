# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_go_express(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_goexpress_app(self, params, context=None):
        """
        run_goexpress_app
        ref: https://bioconductor.org/packages/release/bioc/html/GOexpress.html
        :param params: instance of type "GOExpressInput" (required params:
           workspace_name: Name of the workspace expressionset_ref:
           ExpressionSet object reference condition1: First condition
           condition2: Second condition Number of permutations:
           num_permutations optional params:) -> structure: parameter
           "workspace_name" of String, parameter "expression_ref" of type
           "obj_ref" (Reference), parameter "genome_ref" of type "obj_ref"
           (Reference), parameter "sample_id1" of list of String, parameter
           "sample_n_conditions" of list of mapping from String to String,
           parameter "num_permutations" of Long, parameter
           "fold_change_cutoff" of Double
        :returns: instance of type "GOExpressResult" (result_directory:
           folder path that holds all files generated by run_goexpress_app
           report_name: report name generated by KBaseReport report_ref:
           report reference generated by KBaseReport) -> structure: parameter
           "result_directory" of String, parameter "report_name" of String,
           parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_go_express.run_goexpress_app',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_go_express.status',
                                        [], self._service_ver, context)
